 <div id="map"></div>
  <script src="https://unpkg.com/leaflet@1.5.1/dist/leaflet.js"></script>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>	  
    	 <script>	
    	 
    

   var url='http://localhost:8000/'+'getentries';
    axios.post(url).then(function(response){
            
        var parse= JSON.parse(response.data)		
		var geojson= parse

        var cats = [];
        var i=0
    	parse.forEach(function(entry) {
        	i++;
    var cat = entry.fields.categorie1;
        cat = {
            "interestPoints" : createInterestPoints(),
            "id" : "cat" + i,
            "label" : entry.fields.categorie1
        }
        cats.push(cat);
        console.log(cat)
        console.log(cats)
    
    cat["interestPoints"].addData(response.data[i]);
})

function createInterestPoints () {
    return new L.geoJson([], {
        pointToLayer: function(feature, latlng) {
            var smallIcon = L.icon({
                iconUrl: "working/interest-point/" + /*icon-provider.js*/getIcon(feature.properties.categorie1, feature.properties.categorie2, feature.properties.categorie3),
                //shadowUrl: 'icon-shadow.png',
                iconSize:     [33, 44], // taille de l'icone
                //shadowSize:   [50, 64], // taille de l'ombre
                iconAnchor:   [16, 44], // point de l'icone qui correspondra à la position du marker
                //shadowAnchor: [32, 64],  // idem pour l'ombre
                popupAnchor:  [-3, -76] // point depuis lequel la popup doit s'ouvrir relativement à l'iconAnchor
            });
            return L.marker(latlng, {icon: smallIcon});
        },
        onEachFeature: function(feature, layer) {
            var html = '';
            if (feature.properties.titre) {
                html += '<b>' + feature.properties.titre + '</b></br>';
            }
            if (feature.properties.description) {
                html += 'Description :' + feature.properties.description + '</br>';
            }
            if (feature.properties.url) {
                html += '<a href="' + feature.properties.url + '" target="_blank">Site Internet</a></br>';
            }
            if (feature.properties.categorie1) {
                html += 'Catégorie 1 : ' + feature.properties.categorie1 + '</br>';
            }
            if (feature.properties.categorie2) {
                html += 'Catégorie 2 : ' + feature.properties.categorie2 + '</br>';
            }
            if (feature.properties.categorie3) {
                html += 'Catégorie 3 : ' + feature.properties.categorie3 + '</br>';
            }
            layer.bindPopup(html);
        }
    });
}

var stamen = new L.StamenTileLayer("toner-lite");

var map = new L.Map("map", {
    center: new L.LatLng(48.825, 2.27),
    zoom: 15,
    layers: [stamen],
});

var command = L.control({position: 'topright'});
command.onAdd = function (map) {
    var div = L.DomUtil.create('div', 'command');
    for (var i = 0; i < cats.length; i++) {
        div.innerHTML += '<form><input id="' + cats[i]["id"] + '" type="checkbox"/>' + cats[i]["label"] + '</form>';
    }
    return div;
};
command.addTo(map);



for (var i = 0; i < cats.length; i++) {
    document.getElementById(cats[i]["id"]).addEventListener("click", handleCommand, false);
}

function handleCommand() {
    var selectedCat;
    for (var i = 0; i < cats.length; i++) {
        if (cats[i]["id"] === this.id) {
            selectedCat = cats[i];
            break;
        }
    }
    if (this.checked) {
        selectedCat["interestPoints"].addTo(map);
    } else {
        map.removeLayer(selectedCat["interestPoints"]);
    }
}
   
     

	})//end of axios response
            
            
            	  </script>      