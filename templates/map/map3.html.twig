 <div id="map"></div>
  <script src="https://unpkg.com/leaflet@1.5.1/dist/leaflet.js"></script>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>	  
    	 <script>	
    	 
     	   class EntryMarker {
 	 		constructor (catid,lat,lng,icon,catdescription,logo,name,text ){
 	 			this.text= text
 	 			var layer="layer"+catid
 	 			  // custome icon from  actor category
 	 			  var myIcon = L.icon({
 	 				    iconUrl: '../uploads/icons/'+icon,
 	 				    iconSize:     [37, 47], // size of the icon
 	 				    shadowSize:   [64, 45], // size of the shadow
 	 				    iconAnchor:   [26, 63], // point of the icon which will correspond to marker's location
 	 				    popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
 	 				});
 	 	
 	 			this.shortText='<img class="thumbnail-logo" title="'+catdescription+'" src="'+logo+'">' +name
 	 			this.popup = L.popup({
 	 			     autoClose:false,
 	 			     closeOnEscapeKey: false,
 	 			     closeOnClick:true,
 	 			     closeButton:true,
 	 			     className:'entry-marker',
 	 			     maxWidth:300
 	 					
 	 				}).setLatLng([lat, lng])
 	 				  .setContent(this.shortText)

 		 			  //.openOn(map)
 	 	 			 L.marker([lat, lng],{icon:myIcon}).addTo(map)
 	 	 			 .bindPopup(this.popup)	 
 		 			
 	 			}
 					
 	 			setActive(){
 	 				this.popup.getElement().classList.add('active')

 	 				}
 	 			unsetActive(){
 	 				this.popup.getElement().classList.remove('active')

 	 				}
 	 			addEventListener (event,cb){
 	 				this.popup.addEventListener('add', () =>{
 	 					this.popup.getElement().addEventListener(event,cb)
 	 					})
 	 				}
 	 			setContent (){
 	 				this.popup.setContent(this.text)
 	 				this.popup.getElement().classList.add('expanded')
 	 				this.popup.update()
 	 				}
 	 			resetContent(){
 	 				this.popup.setContent(this.shortText)
 	 				this.popup.getElement().classList.remove('expanded')
 	 				this.popup.update()
 	 				
 	 				}
 			
 	 		}

var bounds=[[46.2, 5.2]];
var map = L.map('map',{scrollWheelZoom:false});
	  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
	      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
	  }).addTo(map);
var command = L.control({position: 'topright'});
    		  

   var url='http://localhost:8000/'+'getentries';
    axios.post(url).then(function(response){
            
        var parse= JSON.parse(response.data)		
    	var cats = {};
    	var cat = [];
    	parse.forEach(function(entry) {
        	    
    	           if (entry.fields.categorie1){
    	           
        	        	   if (!(entry.fields.categorie1 in cats)){

            	        	   
              	       	   		cat = {
                   	      	            "id" : entry.fields.categorieid1,
                   	      	            "label" : entry.fields.categorie1,
                   	      	            "icon" : entry.fields.categorieicon1,
                   	      	            "desc" : entry.fields.categoriedescription1,
                   	      	     		"layer": new L.layerGroup([])
                   	      	            }
                   	 	            cats[entry.fields.categorieid1]=cat
                  	 	            
                   	   				
    	           }}
    	           

  


    	           if (entry.fields.categorie2){
         	           
    	        	   if (!(entry.fields.categorie2 in cats)) {
    	           		cat = {
        	      	            "id" : entry.fields.categorieid2,
        	      	            "label" : entry.fields.categorie2,
        	      	            "icon" : entry.fields.categorieicon2,
        	      	            "desc" : entry.fields.categoriedescription2,
        	      	            "layer": new L.layerGroup([])
        	      	            }
           	 	            cats[entry.fields.categorieid2]=cat
	           			}
    	           }         

    	           if (entry.fields.categorie3){
         	           
    	        	   if (!(entry.fields.categorie3 in cats)){
    	           		cat = {
        	      	            "id" : entry.fields.categorieid3,
        	      	            "label" : entry.fields.categorie3,
        	      	            "icon" : entry.fields.categorieicon3,
        	      	            "desc" : entry.fields.categoriedescription3,
        	      	          	"layer": new L.layerGroup([])
        	      	            }
           	 	            cats[entry.fields.categorieid3]=cat
	           }
    	           }


        })  // first for each

//command
            command.onAdd = function (map) {
                var div = L.DomUtil.create('div', 'command');
        		console.log("CATA")    		    	    
                for (var cat in cats){
            		console.log("CAT")    		    	    
                	console.log(cat)   
    	 	        div.innerHTML += '<form><input id="'+cats[cat].id+'" type="checkbox"/><img src="uploads/icons/'+cats[cat].icon+'" title="'+cats[cat].desc+'">'+cats[cat].label+'</form>';	    
    				console.log("div")
    				console.log(div.innerHTML)
                }
				return div
            }
            command.addTo(map);
        
//markers
    	parse.forEach(function(entry) {

    		
				let marker = new EntryMarker (entry.fields.categorieid,entry.fields.latitude,entry.fields.longitude,entry.fields.categorieicon1, entry.fields.catdescription,entry.fields.logo, entry.fields.name,entry.fields.text);
				console.log("entry")
				console.log(entry)
				bounds.push([entry.fields.latitude,entry.fields.longitude])
	  		 	 marker.addEventListener('click', function(){
	  		 			if (activeMarker !==null){
	  		 			activeMarker.resetContent()
	  		 				}
	  		 		marker.setContent()
	  		 		activeMarker = marker
	  		 		 })	
 					 for (var cat in cats){
 							if (entry.fields.categorieid1 == cats[cat].id){
 								cats[cat].layer.addLayer(marker)
 								console.log('ok')
 								console.log(cats[cat].layer)
 	 							}
 					 }

        	})


        
		console.log("CATS")
		console.log(cats)    		    	    
    	console.log(cats[1].label)    	
    	console.log(!(4 in cats))
  
		
        



 	
			

        	
        	
for (var cat in cats){

	document.getElementById(cats[cat].id).addEventListener("click", handleCommand, false);

}

function handleCommand() {

    for (var cat in cats){

        if (cats[cat].id == this.id) {

        	console.log('check')
            
            if (this.checked) {
            	cats[cat].layer._layers.addto(map)
            	console.log(cats[cat].layer[_layers])
            	
            } else {
            	console.log(cats[cat].layer._layers)
                map.removeLayer(cats[cat].layer._layers);
                
            }
        }
    }
	console.log(cats)

}




	console.log(bounds)
	map.fitBounds(bounds);
     

	})//end of axios response
            
            
            	  </script>      